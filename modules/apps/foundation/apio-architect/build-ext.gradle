import com.liferay.gradle.plugins.app.docker.AppDockerPlugin
import com.liferay.gradle.util.OSDetector

import java.nio.file.Files
import java.nio.file.attribute.FileAttribute
import java.nio.file.attribute.PosixFilePermission
import java.nio.file.attribute.PosixFilePermissions

import javax.management.remote.JMXConnectorFactory as JmxFactory
import javax.management.remote.JMXServiceURL as JmxUrl

import org.kt3k.gradle.plugin.CoverallsPlugin

buildscript {
	dependencies {
		classpath group: "com.liferay", name: "com.liferay.gradle.plugins.app.docker", version: "1.0.2"
		classpath group: "org.kt3k.gradle.plugin", name: "coveralls-gradle-plugin", version: "2.6.3"
	}

	repositories {
		maven {
			url "https://cdn.lfrs.sl/repository.liferay.com/nexus/content/groups/public"
		}
	}
}

apply plugin: AppDockerPlugin
apply plugin: CoverallsPlugin

allprojects {
	apply plugin: JacocoPlugin

	jacoco {
		toolVersion = "0.7.8"
	}

	repositories {
		mavenLocal()

		maven {
			url "https://cdn.lfrs.sl/repository.liferay.com/nexus/content/groups/public"
		}
	}
}

configure(subprojects.findAll {!it.childProjects}) {
	liferay {
		deployDir = getClientDeployDir()
	}

	task createClientDeployDir {
		doLast {
			File clientDeployDir = getClientDeployDir()

			FileAttribute[] fileAttributes = []

			if (!OSDetector.windows) {
				Set<PosixFilePermission> posixFilePermissions = PosixFilePermissions.fromString("rwxrwxrwx")

				fileAttributes = [PosixFilePermissions.asFileAttribute(posixFilePermissions)]
			}

			Files.createDirectories clientDeployDir.toPath(), fileAttributes
		}
	}

	task createJacocoTestIntegrationFile {
		doLast {
			File jaCoCoTestIntegrationFile = new File(rootDir, "build/jacoco/testIntegration.exec")

			jaCoCoTestIntegrationFile.createNewFile()
		}
	}

	task copyJacocoAgent(type: Copy) {
		configurations.jacocoAgent.asFileTree.each {
			from(zipTree(it))
		}
		into "${rootDir}/build/jacoco"

		finalizedBy createJacocoTestIntegrationFile
	}

	deploy {
		dependsOn createClientDeployDir
	}

	test {
		ignoreFailures = false
	}

	testIntegration {
		ignoreFailures = false

		testLogging {
			events "started", "passed", "skipped", "failed", "standardOut", "standardError"
			showExceptions true
			exceptionFormat "full"
			showCauses true
			showStackTraces true
		}
	}

	setUpTestableTomcat {
		enabled = false
	}

	startTestableTomcat {
		enabled = false
	}

	stopTestableTomcat {
		enabled = false
	}
}

appDocker {
	imageName this.getImageName()
	imageUser this.getUserName()
	inputDir "apio-architect-docker"

	def excludedModules = project.getProperty('com.liferay.apio.architect.docker.excluded.modules').split(',')

	onlyIf {
		project -> !excludedModules.contains(project.name)
	}
}

docker {
	registryCredentials {
		username = System.getenv().get("DOCKER_USER")
		password = System.getenv().get("DOCKER_PWD")
	}
}

task checkDocker() {
	doLast {
		def url = "http://localhost:8080"

		println("Trying to reach " + url)

		while (true) {
			try {
				print(".")

				url.toURL().text

				println("Whiteboard startup finished")

				break
			}
			catch (ignored) {
				Thread.sleep(1000)
			}
		}
	}
}

task stopDocker(type: Exec) {
	ignoreExitValue true

	commandLine 'docker', 'stop', '-t', '0', "apio"
}

task rmDocker(type: Exec) {
	dependsOn stopDocker

	ignoreExitValue true

	commandLine 'docker', 'rm', "apio"
}

task runDocker(type: Exec) {
	dependsOn rmDocker
	dependsOn subprojects.findAll {!it.childProjects}.copyJacocoAgent

	def javaOpts = project.getProperty('com.liferay.apio.architect.java.opts')

	javaOpts += ' ' + project.getProperty('com.liferay.apio.architect.jacoco.opts')

	if (project.hasProperty('debug')) {
		javaOpts += ' ' + project.getProperty('com.liferay.apio.architect.debug.opts')
	}

	commandLine 'docker', 'run',
	'-e', "JACOCO_DIR=${rootDir}/build/jacoco",
	'-e', "JAVA_OPTS=$javaOpts",
	'-e', "LIFERAY_APIO_AUTH=${System.getenv('LIFERAY_APIO_AUTH')}",
	'-e', "ROOT_DIR=${rootDir}",
	'-p', '5005:5005',
	'-p', '8080:8080',
	'-p', '8099:8099',
	'-p', '6666:6666',
	'-v', "${rootDir}/build/jacoco:/jacoco",
	'-v', "${getClientDeployDir()}:/deploy",
	'-d',
	'--name', "apio",
	getImageNameWithUserAndVersion()

	finalizedBy checkDocker
}

def getClientDeployDir() {
	return new File(rootDir, project.property("com.liferay.apio.architect.deploy.dir"))
}

def getImageName() {
	return project.property("com.liferay.apio.architect.docker.image.name")
}

def getImageVersion() {
	return project.property("com.liferay.apio.architect.docker.image.version")
}

def getUserName() {
	return project.property("com.liferay.apio.architect.docker.username")
}

def getImageNameWithUser() {
	return getUserName() + "/" + getImageName()
}

def getImageNameWithUserAndVersion() {
	return getImageNameWithUser() + ":" + getImageVersion()
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
	additionalSourceDirs = files(subprojects.findAll{!it.childProjects}.sourceSets.main.allSource.srcDirs)
	sourceDirectories = files(subprojects.findAll{!it.childProjects}.sourceSets.main.allSource.srcDirs)
	classDirectories = files(subprojects.findAll{!it.childProjects}.sourceSets.main.output)
	executionData = files(subprojects.findAll{!it.childProjects}.jacocoTestReport.executionData, "${rootDir}/build/jacoco/testIntegration.exec")

	onlyIf = { true }

	reports {
		html.enabled = true
		xml.enabled = true
		xml.destination "${rootDir}/build/reports/jacoco/test/jacocoTestReport.xml"
		csv.enabled = false
	}

	doFirst {
		executionData = files(executionData.findAll { it.exists() })
	}
}

task dumpJacoco {
	doLast {
		def serverUrl = 'service:jmx:rmi:///jndi/rmi://localhost:8099/jmxrmi'
		String beanName = "org.jacoco:type=Runtime"
		def server = JmxFactory.connect(new JmxUrl(serverUrl)).MBeanServerConnection
		def gmxb = new GroovyMBean(server, beanName)

		gmxb.dump(true)
	}
}

tasks.coveralls {
	dependsOn jacocoRootReport
}

coveralls.sourceDirs = files(subprojects.findAll{!it.childProjects}.sourceSets.main.allSource.srcDirs).collect {
	file -> file.absolutePath
}