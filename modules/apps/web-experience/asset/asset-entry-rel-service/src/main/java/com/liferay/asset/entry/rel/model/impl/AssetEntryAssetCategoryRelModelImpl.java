/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.asset.entry.rel.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.asset.entry.rel.model.AssetEntryAssetCategoryRel;
import com.liferay.asset.entry.rel.model.AssetEntryAssetCategoryRelModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AssetEntryAssetCategoryRel service. Represents a row in the &quot;AssetEntryAssetCategoryRel&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link AssetEntryAssetCategoryRelModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AssetEntryAssetCategoryRelImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AssetEntryAssetCategoryRelImpl
 * @see AssetEntryAssetCategoryRel
 * @see AssetEntryAssetCategoryRelModel
 * @generated
 */
@ProviderType
public class AssetEntryAssetCategoryRelModelImpl extends BaseModelImpl<AssetEntryAssetCategoryRel>
	implements AssetEntryAssetCategoryRelModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a asset entry asset category rel model instance should use the {@link AssetEntryAssetCategoryRel} interface instead.
	 */
	public static final String TABLE_NAME = "AssetEntryAssetCategoryRel";
	public static final Object[][] TABLE_COLUMNS = {
			{ "assetEntryAssetCategoryRelId", Types.BIGINT },
			{ "assetEntryId", Types.BIGINT },
			{ "assetCategoryId", Types.BIGINT },
			{ "priority", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("assetEntryAssetCategoryRelId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("assetEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("assetCategoryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("priority", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table AssetEntryAssetCategoryRel (assetEntryAssetCategoryRelId LONG not null primary key,assetEntryId LONG,assetCategoryId LONG,priority INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table AssetEntryAssetCategoryRel";
	public static final String ORDER_BY_JPQL = " ORDER BY assetEntryAssetCategoryRel.assetEntryAssetCategoryRelId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY AssetEntryAssetCategoryRel.assetEntryAssetCategoryRelId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.asset.entry.rel.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.asset.entry.rel.model.AssetEntryAssetCategoryRel"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.asset.entry.rel.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.asset.entry.rel.model.AssetEntryAssetCategoryRel"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.asset.entry.rel.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.asset.entry.rel.model.AssetEntryAssetCategoryRel"),
			true);
	public static final long ASSETCATEGORYID_COLUMN_BITMASK = 1L;
	public static final long ASSETENTRYID_COLUMN_BITMASK = 2L;
	public static final long ASSETENTRYASSETCATEGORYRELID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.asset.entry.rel.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.asset.entry.rel.model.AssetEntryAssetCategoryRel"));

	public AssetEntryAssetCategoryRelModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _assetEntryAssetCategoryRelId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAssetEntryAssetCategoryRelId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _assetEntryAssetCategoryRelId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AssetEntryAssetCategoryRel.class;
	}

	@Override
	public String getModelClassName() {
		return AssetEntryAssetCategoryRel.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("assetEntryAssetCategoryRelId",
			getAssetEntryAssetCategoryRelId());
		attributes.put("assetEntryId", getAssetEntryId());
		attributes.put("assetCategoryId", getAssetCategoryId());
		attributes.put("priority", getPriority());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long assetEntryAssetCategoryRelId = (Long)attributes.get(
				"assetEntryAssetCategoryRelId");

		if (assetEntryAssetCategoryRelId != null) {
			setAssetEntryAssetCategoryRelId(assetEntryAssetCategoryRelId);
		}

		Long assetEntryId = (Long)attributes.get("assetEntryId");

		if (assetEntryId != null) {
			setAssetEntryId(assetEntryId);
		}

		Long assetCategoryId = (Long)attributes.get("assetCategoryId");

		if (assetCategoryId != null) {
			setAssetCategoryId(assetCategoryId);
		}

		Integer priority = (Integer)attributes.get("priority");

		if (priority != null) {
			setPriority(priority);
		}
	}

	@Override
	public long getAssetEntryAssetCategoryRelId() {
		return _assetEntryAssetCategoryRelId;
	}

	@Override
	public void setAssetEntryAssetCategoryRelId(
		long assetEntryAssetCategoryRelId) {
		_assetEntryAssetCategoryRelId = assetEntryAssetCategoryRelId;
	}

	@Override
	public long getAssetEntryId() {
		return _assetEntryId;
	}

	@Override
	public void setAssetEntryId(long assetEntryId) {
		_columnBitmask |= ASSETENTRYID_COLUMN_BITMASK;

		if (!_setOriginalAssetEntryId) {
			_setOriginalAssetEntryId = true;

			_originalAssetEntryId = _assetEntryId;
		}

		_assetEntryId = assetEntryId;
	}

	public long getOriginalAssetEntryId() {
		return _originalAssetEntryId;
	}

	@Override
	public long getAssetCategoryId() {
		return _assetCategoryId;
	}

	@Override
	public void setAssetCategoryId(long assetCategoryId) {
		_columnBitmask |= ASSETCATEGORYID_COLUMN_BITMASK;

		if (!_setOriginalAssetCategoryId) {
			_setOriginalAssetCategoryId = true;

			_originalAssetCategoryId = _assetCategoryId;
		}

		_assetCategoryId = assetCategoryId;
	}

	public long getOriginalAssetCategoryId() {
		return _originalAssetCategoryId;
	}

	@Override
	public int getPriority() {
		return _priority;
	}

	@Override
	public void setPriority(int priority) {
		_priority = priority;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AssetEntryAssetCategoryRel.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AssetEntryAssetCategoryRel toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AssetEntryAssetCategoryRel)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AssetEntryAssetCategoryRelImpl assetEntryAssetCategoryRelImpl = new AssetEntryAssetCategoryRelImpl();

		assetEntryAssetCategoryRelImpl.setAssetEntryAssetCategoryRelId(getAssetEntryAssetCategoryRelId());
		assetEntryAssetCategoryRelImpl.setAssetEntryId(getAssetEntryId());
		assetEntryAssetCategoryRelImpl.setAssetCategoryId(getAssetCategoryId());
		assetEntryAssetCategoryRelImpl.setPriority(getPriority());

		assetEntryAssetCategoryRelImpl.resetOriginalValues();

		return assetEntryAssetCategoryRelImpl;
	}

	@Override
	public int compareTo(AssetEntryAssetCategoryRel assetEntryAssetCategoryRel) {
		long primaryKey = assetEntryAssetCategoryRel.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AssetEntryAssetCategoryRel)) {
			return false;
		}

		AssetEntryAssetCategoryRel assetEntryAssetCategoryRel = (AssetEntryAssetCategoryRel)obj;

		long primaryKey = assetEntryAssetCategoryRel.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		AssetEntryAssetCategoryRelModelImpl assetEntryAssetCategoryRelModelImpl = this;

		assetEntryAssetCategoryRelModelImpl._originalAssetEntryId = assetEntryAssetCategoryRelModelImpl._assetEntryId;

		assetEntryAssetCategoryRelModelImpl._setOriginalAssetEntryId = false;

		assetEntryAssetCategoryRelModelImpl._originalAssetCategoryId = assetEntryAssetCategoryRelModelImpl._assetCategoryId;

		assetEntryAssetCategoryRelModelImpl._setOriginalAssetCategoryId = false;

		assetEntryAssetCategoryRelModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AssetEntryAssetCategoryRel> toCacheModel() {
		AssetEntryAssetCategoryRelCacheModel assetEntryAssetCategoryRelCacheModel =
			new AssetEntryAssetCategoryRelCacheModel();

		assetEntryAssetCategoryRelCacheModel.assetEntryAssetCategoryRelId = getAssetEntryAssetCategoryRelId();

		assetEntryAssetCategoryRelCacheModel.assetEntryId = getAssetEntryId();

		assetEntryAssetCategoryRelCacheModel.assetCategoryId = getAssetCategoryId();

		assetEntryAssetCategoryRelCacheModel.priority = getPriority();

		return assetEntryAssetCategoryRelCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{assetEntryAssetCategoryRelId=");
		sb.append(getAssetEntryAssetCategoryRelId());
		sb.append(", assetEntryId=");
		sb.append(getAssetEntryId());
		sb.append(", assetCategoryId=");
		sb.append(getAssetCategoryId());
		sb.append(", priority=");
		sb.append(getPriority());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append(
			"com.liferay.asset.entry.rel.model.AssetEntryAssetCategoryRel");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>assetEntryAssetCategoryRelId</column-name><column-value><![CDATA[");
		sb.append(getAssetEntryAssetCategoryRelId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assetEntryId</column-name><column-value><![CDATA[");
		sb.append(getAssetEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>assetCategoryId</column-name><column-value><![CDATA[");
		sb.append(getAssetCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priority</column-name><column-value><![CDATA[");
		sb.append(getPriority());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = AssetEntryAssetCategoryRel.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			AssetEntryAssetCategoryRel.class
		};
	private long _assetEntryAssetCategoryRelId;
	private long _assetEntryId;
	private long _originalAssetEntryId;
	private boolean _setOriginalAssetEntryId;
	private long _assetCategoryId;
	private long _originalAssetCategoryId;
	private boolean _setOriginalAssetCategoryId;
	private int _priority;
	private long _columnBitmask;
	private AssetEntryAssetCategoryRel _escapedModel;
}